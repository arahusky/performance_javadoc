<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="JavaPerfDoc" default="main">

	<property environment="env"/>

	<!-- source directories -->
	<property name="src.dir" location="src" />
	<property name="doclet.src.dir" location="${src.dir}/java-doclet" />
	<property name="demo.src.dir" location="${src.dir}/java-demo" />
	<property name="server.src.dir" location="${src.dir}/java-server" />
	<property name="test.src.dir" location="${src.dir}/test-java" />
	<property name="perftools.src.dir" location="${src.dir}/java-shared" />
	
	<!-- build directories -->
	<property name="build.dir" location="out" />
	<property name="javadoc.build.dir" location="${build.dir}/javadoc" />
	<property name="doclet.build.dir" location="${build.dir}/classes/java-doclet" />
	<property name="demo.build.dir" location="${build.dir}/classes/java-demo" />
	<property name="demo.build.javadoc.dir" location="${build.dir}/demo/" />
	<property name="server.build.dir" location="${build.dir}/classes/java-server" />
	<property name="test.build.dir" location="${build.dir}/classes/test-java" />

	<!-- test output directories -->
	<property name="test.output.dir" location="${build.dir}/test" />
	<property name="testhtml.output.dir" location="${test.output.dir}/html" />
	<property name="testtxtxml.output.dir" location="${test.output.dir}/txtXml" />
	
	<!-- external libraries -->

		<!-- names -->
	<property name="json.parser.name.jar" value="json-20140107.jar"/>
	<property name="derby.name.jar" value="derby.jar"/>
	<property name="math.name.jar" value="commons-math3-3.4.1.jar"/>
	<property name="velocity.name.jar" value="velocity-1.7-dep.jar"/>
		<!-- locations -->
	<property name="lib.dir" location="lib" />
	<property name="jdk.tools.jar" location="${env.JAVA_HOME}/lib/tools.jar" />
	<property name="json.parser.jar" location="${lib.dir}/${json.parser.name.jar}"/>
	<property name="derby.jar" location="${lib.dir}/${derby.name.jar}"/>
	<property name="math.jar" location="${lib.dir}/${math.name.jar}"/>
	<property name="demo.graph.jar" location="${demo.src.dir}/gral-core-0.10.jar" />
	<property name="velocity.jar" location="${lib.dir}/${velocity.name.jar}"/>

	<!-- external libraries used for unit-testing -->
	<property name="junit.jar" location="lib/junit-4.11.jar"/>
	<property name="hamcrest.jar" location="lib/hamcrest-all-1.3.jar"/>	

	<!-- generated jar files -->
	<property name="jars.build.dir" location="${build.dir}/jars" />
	<property name="server.jar" location="${jars.build.dir}/server.jar"/>
	<property name="doclet.jar" location="${jars.build.dir}/doclet.jar"/>

	<target name="main" depends="compile-doclet,compile-demo,compile-server,create-server-jar,create-doclet-jar" description="Main target: compiles everything and creates JAR file for server.">
	</target>	

	<target name="compile-perftools" description="Compile the performance tools (annotations + workloads).">
		<mkdir dir="${server.build.dir}" />
		<mkdir dir="${doclet.build.dir}" />
		<javac srcdir="${perftools.src.dir}" destdir="${doclet.build.dir}"
				debug="true"
				includeantruntime="false">
			<compilerarg value="-Xlint:all"/>
		</javac>
		<javac srcdir="${perftools.src.dir}" destdir="${server.build.dir}"
				debug="true"
				includeantruntime="false">
			<compilerarg value="-Xlint:all"/>
		</javac>
	</target>

	<target name="compile-doclet" depends="compile-perftools" description="Compile the PerfDoc doclet.">
		<javac srcdir="${doclet.src.dir}" destdir="${doclet.build.dir}"
				debug="true"
				includeantruntime="false">
			<compilerarg value="-Xlint:all"/>
			<classpath>				
				<pathelement path="${jdk.tools.jar}"/>
			</classpath>
		</javac>
		<copy todir="${doclet.build.dir}">
			<fileset dir="${doclet.src.dir}" includes="**/resources/**" erroronmissingdir="false"/>
		</copy>
	</target>	

	<target name="compile-demo" depends="compile-doclet" description="Compile the doclet demo.">
		<mkdir dir="${demo.build.dir}" />
		<javac srcdir="${demo.src.dir}" destdir="${demo.build.dir}"
				debug="true"
				includeantruntime="false">
			<compilerarg value="-Xlint:all"/>
			<classpath>
				<pathelement path="${doclet.build.dir}"/>
				<pathelement path="${jdk.tools.jar}"/>
				<pathelement path="${demo.graph.jar}"/>
			</classpath>
		</javac>
	</target>

	<target name="compile-server" depends="compile-perftools" description="Compile the server.">
		
		<javac srcdir="${server.src.dir}" destdir="${server.build.dir}"
				debug="true"
				includeantruntime="false">
			<compilerarg value="-Xlint:all"/>
			<classpath>
				<pathelement path="${json.parser.jar}"/>
				<pathelement path="${math.jar}"/>
				<pathelement path="${velocity.jar}"/>
			</classpath>
		</javac>
		<copy todir="${server.build.dir}">
			<fileset dir="${server.src.dir}" includes="**/resources/**" erroronmissingdir="false"/>
		</copy>
	</target>

	<target name="compile-test" depends="compile-doclet,compile-server" description="Compile the test files.">
		<mkdir dir="${test.build.dir}" />
		<javac srcdir="${test.src.dir}" destdir="${test.build.dir}"
				debug="true"
				includeantruntime="false">
			<compilerarg value="-Xlint:all"/>
			<classpath>
				<pathelement path="${junit.jar}"/>
				<pathelement path="${hamcrest.jar}"/>
				<pathelement path="${server.build.dir}"/>
				<pathelement path="${doclet.build.dir}"/>
			</classpath>
		</javac>
	</target>
			
	<target name="refdoc" description="Build JavaDoc documentation of the project.">
		<mkdir dir="${javadoc.build.dir}" />
		<echo message="Running JavaDoc..." />
		<javadoc
				destdir="${javadoc.build.dir}"
				author="true"
				windowtitle="${ant.project.name}"
				additionalparam="-Xdoclint:none">
			<packageset
				dir="${server.src.dir}"
				defaultexcludes="yes" />
			<classpath>
				<pathelement path="${server.jar}"/>
				<pathelement path="${velocity.jar}"/>
				<pathelement path="${math.jar}"/>
				<pathelement path="${json.parser.jar}"/>
			</classpath>
		</javadoc>
		<echo message="Copying extra files..." />
		<copy todir="${javadoc.build.dir}">
			<fileset dir="${java.src.dir}" includes="**/doc-files/**" erroronmissingdir="false"/>
		</copy>
	</target>	
	
	<target name="create-server-jar" depends="compile-server" description="Creates JAR file for server.">
		<jar destfile="${server.jar}" basedir="${server.build.dir}">
			<zipgroupfileset dir="lib" includes="${derby.name.jar}" /> 
			<zipgroupfileset dir="lib" includes="${json.parser.name.jar}" /> 
			<zipgroupfileset dir="lib" includes="${math.name.jar}" /> 
			<zipgroupfileset dir="lib" includes="${velocity.name.jar}" /> 
            <manifest>
                <attribute name="Main-Class" value="cz.cuni.mff.d3s.tools.perfdoc.server.HttpMeasureServer" />
            </manifest>
        </jar>
	</target>

	<target name="create-doclet-jar" depends="compile-doclet" description="Creates JAR file for doclet.">
		<jar destfile="${doclet.jar}" basedir="${doclet.build.dir}">
        </jar>
	</target>

	<target name="run-demo" depends="compile-demo,compile-doclet" description="Run doclet demo.">
		<mkdir dir="${demo.build.javadoc.dir}" />
		<javadoc destdir="${demo.build.javadoc.dir}">
			<fileset dir="${demo.src.dir}" defaultexcludes="yes">
				<include name="**/SimpleWaiting.java"/>
				<include name="**/MyArrayList.java"/>
				<include name="**/MyLinkedList.java"/>
				<include name="**/MyArrayListMoreOps.java"/>
				<include name="**/GralTest.java"/>
				<include name="**/FileUtils.java"/>
				<include name="**/DatabaseInsert.java"/>
			</fileset>
			<doclet
				name="cz.cuni.mff.d3s.tools.perfdoc.doclets.standard.Standard"
				path="${doclet.build.dir}"
			/>
			<classpath>
				<pathelement path="${doclet.build.dir}"/>
				<pathelement path="${demo.graph.jar}"/>
			</classpath>
			<arg value="-sourcepath" />
            <arg value="${demo.src.dir}" />
			<arg value="-workloadpath" />
            <arg value="${demo.build.dir};${lib.dir}" />
            <arg value="-serveraddress" />
            <arg value="http://localhost:4040" />
		</javadoc>
	</target>

	<target name="run-server" depends="compile-server" description="Run server.">
 		<java fork="true" classname="cz.cuni.mff.d3s.tools.perfdoc.server.HttpMeasureServer">
 			<jvmarg value="-Djava.util.logging.config.file=config/logging.properties" />
 			<classpath>
 				<pathelement path="${server.build.dir}"/>
 				<pathelement path="${derby.jar}"/>
 				<pathelement path="${json.parser.jar}"/>
 				<pathelement path="${math.jar}"/>
 				<pathelement path="${velocity.jar}"/>
 			</classpath>
 			<arg value="-port" />
            <arg value="4040" />
 		</java>  
 	</target>

 	<target name="test" depends="compile-doclet,compile-server,compile-test" description="Run unit-tests.">
  	  <mkdir dir="${test.output.dir}"/>
  	  <mkdir dir="${testtxtxml.output.dir}"/>
  	  <mkdir dir="${testhtml.output.dir}"/>

 	   <junit printsummary="yes">
    	   <classpath>
				<pathelement path="${junit.jar}"/>
				<pathelement path="${hamcrest.jar}"/>
				<pathelement path="${derby.jar}"/>
				<pathelement path="${server.build.dir}"/>
				<pathelement path="${doclet.build.dir}"/>
				<pathelement path="${test.build.dir}"/>		
				<pathelement path="${math.jar}"/>						
			</classpath>

			<formatter type="plain"/>
      		<formatter type="xml"/>

    		<batchtest fork="yes" todir="${testtxtxml.output.dir}">
       		 	<fileset dir="${test.build.dir}"> 
       		 		<include name="**/*Test.*"/>          		 
       			</fileset>
      	    </batchtest>
       </junit>

       <junitreport todir="${test.output.dir}">
  			<fileset dir="${testtxtxml.output.dir}">
  			</fileset>
  			<report format="frames" todir="${testhtml.output.dir}"/>
	   </junitreport>

       <delete dir="test_database" />
       <echo message="Test results can be found in the directory 'test'..." />
 	</target>
	
	<target name = "full" depends="main,run-demo,run-server" description="Compiles everything, runs demo, runs server">
	</target>

	<target name="clean" description="Remove all the generated files.">
		<delete dir="${build.dir}/demo" />
		<delete dir="${build.dir}/classes" />
		<delete dir="${jars.build.dir}" />
		<delete dir="database" />		
		<delete dir="test" />
		<delete file="derby.log" />	
	</target>
</project>
