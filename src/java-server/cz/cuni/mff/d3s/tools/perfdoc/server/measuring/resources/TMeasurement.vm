import java.io.File;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import java.io.PrintWriter;
import java.lang.reflect.Method;

import cz.cuni.mff.d3s.tools.perfdoc.workloads.WorkloadImpl;
import cz.cuni.mff.d3s.tools.perfdoc.workloads.ServiceWorkloadImpl;

public class TMeasurement {

    //full-path to directory, where results will be saved (must end with File.separator)
    private static String directoryWhereToSaveResults = "$directoryWhereToSaveResults";   
        
    private static int PRIORITY = $priority;

    //note that the WARMUP_TIME and MEASUREMENT_TIME are in seconds
    private static int WARMUP_MEASUREMENTS = $warmupCycles;
    private static int WARMUP_TIME = $warmupTime;
    private static int MEASUREMENT_COUNT = $measurementCycles;
    private static int MEASUREMENT_TIME = $measurementTime;

    public static void main(String[] argv) 
            throws Throwable {
        new TMeasurement(argv);
    } 

    public TMeasurement(String[] argv) 
            throws Throwable {

        WorkloadImpl workloadImpl = new WorkloadImpl();
        ServiceWorkloadImpl serviceImpl = new ServiceWorkloadImpl();

        //passing the priority to generator
        serviceImpl.setPriority(PRIORITY);

        TGenerator tGen = new TGenerator();
        
        //warmup
        int warmupMeasurementsDone = 0;
        long warmupTimeSpent = 0;
        long warmupStartTime = System.currentTimeMillis() / 1000;

        while(true) {
            warmupTimeSpent = (System.currentTimeMillis() / 1000) - warmupStartTime;
            if ((warmupTimeSpent > WARMUP_TIME) || (warmupMeasurementsDone > WARMUP_MEASUREMENTS)) {
                break;
            }

            //preparing workload for new results
            workloadImpl.reset();
            
            tGen.call(workloadImpl, serviceImpl);       

            warmupMeasurementsDone += measure(workloadImpl, null);
        }

        //measurement
        List<Long> times = new ArrayList<>();

        long measurementsDone = 0;
        long measurementTimeSpent = 0;
        long measurementStartTime = System.currentTimeMillis() / 1000;
        while (true) {
            measurementTimeSpent = (System.currentTimeMillis() / 1000) - measurementStartTime;
            if ((measurementTimeSpent > MEASUREMENT_TIME) || (measurementsDone > MEASUREMENT_COUNT)) {
                break;
            }

            //preparing workload for new results
            workloadImpl.reset();
            
            tGen.call(workloadImpl, serviceImpl);

            measurementsDone += measure(workloadImpl, times);
        }

        File file = new File(directoryWhereToSaveResults + "results.txt");
        file.createNewFile();

        try (PrintWriter writer = new PrintWriter(new FileWriter(file))) {
            for (Long l : times) {
                writer.println(l);
            }
        }
    }

    /**
     * Performs warmup/measurement cycle with arguments and instance from given workloadImpl.
     *
     * @param workloadImpl instance containing prepared arguments and instances to call workload
     * @param times if warming-up then null, otherwise instance, in which the
     * method execution time will be saved.
     * @return number of measurements done during this call
     */
    private int measure(WorkloadImpl workloadImpl, List<Long> times) throws Throwable {
        int measurementsCount = 0;        
        for (Object[] objs : workloadImpl.getCalls()) {
                Object[] args = (Object[]) objs[1];
                Object objectOnWhichToInvoke = objs[0];

                #if ($mFunctionIsStatic)
                TMethod tMet = new TMethod();
                #else
                TMethod tMet = new TMethod(($mClass)objectOnWhichToInvoke);
                #end

                //Thread.yield();

                long startTime = System.nanoTime();
                tMet.call(args);
                long endTime = System.nanoTime();
                
                //if measuring (not warming-up)
                if (times != null) {
                    times.add(endTime - startTime);                    
                }

                Method afterMeasurementMethod = workloadImpl.getAfterMeasurementMethod();
                if (afterMeasurementMethod != null) {
                    Object instance = workloadImpl.getInstance();
                    afterMeasurementMethod.invoke(instance, objs);
                }

                measurementsCount++;
            }

            Method afterBenchmarkMethod = workloadImpl.getAfterBenchmarkMethod();        
            if (afterBenchmarkMethod != null) {
                Object instance = workloadImpl.getInstance();
                afterBenchmarkMethod.invoke(instance, (Object[]) null);
            }

            return measurementsCount;
    }
}