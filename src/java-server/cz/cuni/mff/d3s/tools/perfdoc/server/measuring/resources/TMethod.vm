public class TMethod {
    
    #if ($mFunctionIsNotVoid)
        //we do not want to allow optimizer to optimize out the call of method (against Dead code elimination)
        public static volatile Object result;
    #end

    #if ($mFunctionIsStatic)
        //just to be sure, that class is loaded into JVM
        private Class<?> fClass = $mClass .class;
    #else
        private $mClass fInstance;

        public TMethod($mClass instance) {
            this.fInstance = instance;
        }
    #end

    public void call(Object[] arguments) throws Throwable{
        #if ($mFunctionIsNotVoid)
         result = 
        #end

        #if ($mFunctionIsStatic)
        $mClass
        #else
        this.fInstance
        #end

        . $mFunction.getName() (

        #if ($mFunctionHasBlackhole)
            cz.cuni.mff.d3s.tools.perfdoc.server.measuring.BlackholeFactory.getInstance()
            #if (!($mFunctionMeasureParams) || ($mFunctionMeasureParams.size() > 0))
                        , 
            #end            
        #end
        #foreach ($param in $mFunctionMeasureParams)
                #if ($foreach.index > 0)
                            ,
                #end
                ($param.getCanonicalName()) arguments[$foreach.index]
            #end
        );
    }
}